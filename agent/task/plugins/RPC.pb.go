// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: RPC.proto

package plugins

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamp.Timestamp

type ProtectionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module         int32                `protobuf:"varint,1,opt,name=module,proto3" json:"module,omitempty"`
	Timestamp      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TxnId          string               `protobuf:"bytes,3,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	AppId          string               `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DstIp          string               `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstPort        int32                `protobuf:"varint,6,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	SrcIp          string               `protobuf:"bytes,7,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcPort        int32                `protobuf:"varint,8,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	Url            string               `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Method         string               `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	Host           string               `protobuf:"bytes,11,opt,name=host,proto3" json:"host,omitempty"`
	HttpVersion    string               `protobuf:"bytes,12,opt,name=http_version,json=httpVersion,proto3" json:"http_version,omitempty"`
	ReqHeaders     string               `protobuf:"bytes,13,opt,name=req_headers,json=reqHeaders,proto3" json:"req_headers,omitempty"`
	ReqBody        []byte               `protobuf:"bytes,14,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	ResCode        int32                `protobuf:"varint,15,opt,name=res_code,json=resCode,proto3" json:"res_code,omitempty"`
	ResHeaders     string               `protobuf:"bytes,16,opt,name=res_headers,json=resHeaders,proto3" json:"res_headers,omitempty"`
	ResBody        []byte               `protobuf:"bytes,17,opt,name=res_body,json=resBody,proto3" json:"res_body,omitempty"`
	RuleId         string               `protobuf:"bytes,18,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleVersion    string               `protobuf:"bytes,19,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	Category       string               `protobuf:"bytes,20,opt,name=category,proto3" json:"category,omitempty"`
	TriggerMessage string               `protobuf:"bytes,21,opt,name=trigger_message,json=triggerMessage,proto3" json:"trigger_message,omitempty"`
}

func (x *ProtectionLog) Reset() {
	*x = ProtectionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RPC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectionLog) ProtoMessage() {}

func (x *ProtectionLog) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectionLog.ProtoReflect.Descriptor instead.
func (*ProtectionLog) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{0}
}

func (x *ProtectionLog) GetModule() int32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *ProtectionLog) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ProtectionLog) GetTxnId() string {
	if x != nil {
		return x.TxnId
	}
	return ""
}

func (x *ProtectionLog) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ProtectionLog) GetDstIp() string {
	if x != nil {
		return x.DstIp
	}
	return ""
}

func (x *ProtectionLog) GetDstPort() int32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *ProtectionLog) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *ProtectionLog) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *ProtectionLog) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ProtectionLog) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ProtectionLog) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ProtectionLog) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

func (x *ProtectionLog) GetReqHeaders() string {
	if x != nil {
		return x.ReqHeaders
	}
	return ""
}

func (x *ProtectionLog) GetReqBody() []byte {
	if x != nil {
		return x.ReqBody
	}
	return nil
}

func (x *ProtectionLog) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *ProtectionLog) GetResHeaders() string {
	if x != nil {
		return x.ResHeaders
	}
	return ""
}

func (x *ProtectionLog) GetResBody() []byte {
	if x != nil {
		return x.ResBody
	}
	return nil
}

func (x *ProtectionLog) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *ProtectionLog) GetRuleVersion() string {
	if x != nil {
		return x.RuleVersion
	}
	return ""
}

func (x *ProtectionLog) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ProtectionLog) GetTriggerMessage() string {
	if x != nil {
		return x.TriggerMessage
	}
	return ""
}

type SystemLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Event     string               `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Detail    string               `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *SystemLog) Reset() {
	*x = SystemLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RPC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLog) ProtoMessage() {}

func (x *SystemLog) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLog.ProtoReflect.Descriptor instead.
func (*SystemLog) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{1}
}

func (x *SystemLog) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SystemLog) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *SystemLog) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type OperationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId    int64                `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ip        string               `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Action    int64                `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
	Result    string               `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
	Detail    string               `protobuf:"bytes,7,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *OperationLog) Reset() {
	*x = OperationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RPC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLog) ProtoMessage() {}

func (x *OperationLog) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLog.ProtoReflect.Descriptor instead.
func (*OperationLog) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{2}
}

func (x *OperationLog) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OperationLog) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OperationLog) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *OperationLog) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *OperationLog) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *OperationLog) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RPC_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_RPC_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_RPC_proto_rawDescGZIP(), []int{3}
}

func (x *Reply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Reply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_RPC_proto protoreflect.FileDescriptor

var file_RPC_proto_rawDesc = []byte{
	0x0a, 0x09, 0x52, 0x50, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x73, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x35, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xfa, 0x09, 0x0a, 0x06, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x12, 0x16, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x72, 0x69,
	0x74, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x72, 0x69, 0x74, 0x53, 0x79, 0x73, 0x4c, 0x6f,
	0x67, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a,
	0x57, 0x61, 0x72, 0x6e, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67,
	0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79,
	0x73, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0b, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x53, 0x79, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0a, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x09, 0x43, 0x72, 0x69, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x70, 0x4c, 0x6f,
	0x67, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x57, 0x61,
	0x72, 0x6e, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12,
	0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f,
	0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x1a, 0x0e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RPC_proto_rawDescOnce sync.Once
	file_RPC_proto_rawDescData = file_RPC_proto_rawDesc
)

func file_RPC_proto_rawDescGZIP() []byte {
	file_RPC_proto_rawDescOnce.Do(func() {
		file_RPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_RPC_proto_rawDescData)
	})
	return file_RPC_proto_rawDescData
}

var file_RPC_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_RPC_proto_goTypes = []interface{}{
	(*ProtectionLog)(nil),       // 0: plugins.ProtectionLog
	(*SystemLog)(nil),           // 1: plugins.SystemLog
	(*OperationLog)(nil),        // 2: plugins.OperationLog
	(*Reply)(nil),               // 3: plugins.Reply
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_RPC_proto_depIdxs = []int32{
	4,  // 0: plugins.ProtectionLog.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 1: plugins.SystemLog.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 2: plugins.OperationLog.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 3: plugins.logger.Emerg:input_type -> plugins.ProtectionLog
	0,  // 4: plugins.logger.Alert:input_type -> plugins.ProtectionLog
	0,  // 5: plugins.logger.Crit:input_type -> plugins.ProtectionLog
	0,  // 6: plugins.logger.Error:input_type -> plugins.ProtectionLog
	0,  // 7: plugins.logger.Warn:input_type -> plugins.ProtectionLog
	0,  // 8: plugins.logger.Notice:input_type -> plugins.ProtectionLog
	0,  // 9: plugins.logger.Info:input_type -> plugins.ProtectionLog
	0,  // 10: plugins.logger.Debug:input_type -> plugins.ProtectionLog
	1,  // 11: plugins.logger.EmergSysLog:input_type -> plugins.SystemLog
	1,  // 12: plugins.logger.AlertSysLog:input_type -> plugins.SystemLog
	1,  // 13: plugins.logger.CritSysLog:input_type -> plugins.SystemLog
	1,  // 14: plugins.logger.ErrorSysLog:input_type -> plugins.SystemLog
	1,  // 15: plugins.logger.WarnSysLog:input_type -> plugins.SystemLog
	1,  // 16: plugins.logger.NoticeSysLog:input_type -> plugins.SystemLog
	1,  // 17: plugins.logger.InfoSysLog:input_type -> plugins.SystemLog
	1,  // 18: plugins.logger.DebugSysLog:input_type -> plugins.SystemLog
	2,  // 19: plugins.logger.EmergOpLog:input_type -> plugins.OperationLog
	2,  // 20: plugins.logger.AlertOpLog:input_type -> plugins.OperationLog
	2,  // 21: plugins.logger.CritOpLog:input_type -> plugins.OperationLog
	2,  // 22: plugins.logger.ErrorOpLog:input_type -> plugins.OperationLog
	2,  // 23: plugins.logger.WarnOpLog:input_type -> plugins.OperationLog
	2,  // 24: plugins.logger.NoticeOpLog:input_type -> plugins.OperationLog
	2,  // 25: plugins.logger.InfoOpLog:input_type -> plugins.OperationLog
	2,  // 26: plugins.logger.DebugOpLog:input_type -> plugins.OperationLog
	3,  // 27: plugins.logger.Emerg:output_type -> plugins.Reply
	3,  // 28: plugins.logger.Alert:output_type -> plugins.Reply
	3,  // 29: plugins.logger.Crit:output_type -> plugins.Reply
	3,  // 30: plugins.logger.Error:output_type -> plugins.Reply
	3,  // 31: plugins.logger.Warn:output_type -> plugins.Reply
	3,  // 32: plugins.logger.Notice:output_type -> plugins.Reply
	3,  // 33: plugins.logger.Info:output_type -> plugins.Reply
	3,  // 34: plugins.logger.Debug:output_type -> plugins.Reply
	3,  // 35: plugins.logger.EmergSysLog:output_type -> plugins.Reply
	3,  // 36: plugins.logger.AlertSysLog:output_type -> plugins.Reply
	3,  // 37: plugins.logger.CritSysLog:output_type -> plugins.Reply
	3,  // 38: plugins.logger.ErrorSysLog:output_type -> plugins.Reply
	3,  // 39: plugins.logger.WarnSysLog:output_type -> plugins.Reply
	3,  // 40: plugins.logger.NoticeSysLog:output_type -> plugins.Reply
	3,  // 41: plugins.logger.InfoSysLog:output_type -> plugins.Reply
	3,  // 42: plugins.logger.DebugSysLog:output_type -> plugins.Reply
	3,  // 43: plugins.logger.EmergOpLog:output_type -> plugins.Reply
	3,  // 44: plugins.logger.AlertOpLog:output_type -> plugins.Reply
	3,  // 45: plugins.logger.CritOpLog:output_type -> plugins.Reply
	3,  // 46: plugins.logger.ErrorOpLog:output_type -> plugins.Reply
	3,  // 47: plugins.logger.WarnOpLog:output_type -> plugins.Reply
	3,  // 48: plugins.logger.NoticeOpLog:output_type -> plugins.Reply
	3,  // 49: plugins.logger.InfoOpLog:output_type -> plugins.Reply
	3,  // 50: plugins.logger.DebugOpLog:output_type -> plugins.Reply
	27, // [27:51] is the sub-list for method output_type
	3,  // [3:27] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_RPC_proto_init() }
func file_RPC_proto_init() {
	if File_RPC_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_RPC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RPC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RPC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RPC_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RPC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_RPC_proto_goTypes,
		DependencyIndexes: file_RPC_proto_depIdxs,
		MessageInfos:      file_RPC_proto_msgTypes,
	}.Build()
	File_RPC_proto = out.File
	file_RPC_proto_rawDesc = nil
	file_RPC_proto_goTypes = nil
	file_RPC_proto_depIdxs = nil
}
